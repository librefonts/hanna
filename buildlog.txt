# Bake Begins!
### (1 of 6) Copy sources
$ cp -a BM-HANNA.ttf.ttx src/BM-HANNA.otf.ttx BM-HANNA.ttf._p_o_s_t.ttx BM-HANNA.ttf._n_a_m_e.ttx BM-HANNA.ttf._m_a_x_p.ttx BM-HANNA.ttf._l_o_c_a.ttx BM-HANNA.ttf._k_e_r_n.ttx BM-HANNA.ttf._h_m_t_x.ttx BM-HANNA.ttf._h_h_e_a.ttx BM-HANNA.ttf._h_e_a_d.ttx BM-HANNA.ttf._g_l_y_f.ttx BM-HANNA.ttf._g_a_s_p.ttx BM-HANNA.ttf._c_m_a_p.ttx BM-HANNA.ttf.V_D_M_X_.ttx BM-HANNA.ttf.O_S_2f_2.ttx BM-HANNA.ttf.GlyphOrder.ttx src/BM-HANNA.otf._p_o_s_t.ttx src/BM-HANNA.otf._n_a_m_e.ttx src/BM-HANNA.otf._m_a_x_p.ttx src/BM-HANNA.otf._h_m_t_x.ttx src/BM-HANNA.otf._h_h_e_a.ttx src/BM-HANNA.otf._h_e_a_d.ttx src/BM-HANNA.otf._c_m_a_p.ttx src/BM-HANNA.otf.O_S_2f_2.ttx src/BM-HANNA.otf.GlyphOrder.ttx src/BM-HANNA.otf.G_P_O_S_.ttx src/BM-HANNA.otf.C_F_F_.ttx /home/travis/build/fontdirectory/hanna/builds/build/sources
$ cp -a /home/travis/build/fontdirectory/hanna/DESCRIPTION.en_us.html /home/travis/build/fontdirectory/hanna/builds/build
### (2 of 6) pyfontaine
### (3 of 6) Run upstream tests
$ bakery-lint.py upstream-repo sources
$ fontaine --collections subsets --text /home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNA.otf.ttx /home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNA.ttf.ttx > fontaine.txt
WARNING: Please install [PyICU](https://pypi.python.org/pypi/PyICU) toenable [feature], perhaps with: pip install pyicu
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_prepolation_glyph_contours(): OK
end of pyfontaine process
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_prepolation_glyph_points(): OK
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_test_prepolation_glyph_names(): OK
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_component(): OK
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_mark_to_mark(): OK
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_own_glyphs(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_bakery_yaml_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_copyright_notices_same_across_family(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_description_html_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_fontlog_txt_exists(): FAIL
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_metadata_json_exists(): FAIL
$ bakery-lint.py upstream-ttx BM-HANNA.otf.ttx
bakery_lint.tests.upstream.test_glyphname_does_not_contain_disallowed_chars.TestGlyphNameDoesNotContainsDisallowedChars.test_glyphname_does_not_contain_disallowed_chars(): OK
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): FAIL
$ mv /home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNA.otf.ttx /home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNAStd-Bold.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_epar_in_keys(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_os2_in_keys(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_ttx_doesnt_contain_duplicate_glyphs(): OK
bakery_lint.tests.upstream.test_check_ttx_fontfamily_recommendations.TTX_FontFamilyNamingTest.test_ttx_family_naming_recommendation(): OK
$ bakery-lint.py upstream-ttx BM-HANNA.ttf.ttx
bakery_lint.tests.upstream.test_glyphname_does_not_contain_disallowed_chars.TestGlyphNameDoesNotContainsDisallowedChars.test_glyphname_does_not_contain_disallowed_chars(): FAIL
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): FAIL
$ mv /home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNA.ttf.ttx /home/travis/build/fontdirectory/hanna/builds/build/sources/BMHANNA-Regular.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_epar_in_keys(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_os2_in_keys(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_ttx_doesnt_contain_duplicate_glyphs(): FAIL
bakery_lint.tests.upstream.test_check_ttx_fontfamily_recommendations.TTX_FontFamilyNamingTest.test_ttx_family_naming_recommendation(): OK
### (4 of 6) Convert sources to TTF
$ ttx -d /home/travis/build/fontdirectory/hanna/builds/build /home/travis/build/fontdirectory/hanna/builds/build/sources/BMHANNA-Regular.ttx /home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNAStd-Bold.ttx
Compiling "/home/travis/build/fontdirectory/hanna/builds/build/sources/BMHANNA-Regular.ttx" to "/home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf"...
Parsing 'GlyphOrder' table...
Parsing 'head' table...
Parsing 'hhea' table...
Parsing 'maxp' table...
Parsing 'OS/2' table...
Parsing 'hmtx' table...
Parsing 'VDMX' table...
Parsing 'cmap' table...
Parsing 'loca' table...
Parsing 'glyf' table...
Parsing 'kern' table...
Parsing 'name' table...
Parsing 'post' table...
Parsing 'gasp' table...
Compiling "/home/travis/build/fontdirectory/hanna/builds/build/sources/BM-HANNAStd-Bold.ttx" to "/home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.otf"...
Parsing 'GlyphOrder' table...
Parsing 'head' table...
Parsing 'hhea' table...
Parsing 'maxp' table...
Parsing 'OS/2' table...
Parsing 'name' table...
Parsing 'cmap' table...
Parsing 'post' table...
Parsing 'CFF ' table...
Parsing 'GPOS' table...
Parsing 'hmtx' table...
$ font2ttf.py sources/BM-HANNAStd-Bold.otf BM-HANNAStd-Bold.ttf
Warning: Mac and Windows entries in the 'name' table differ for the
 Copyright string in the language Korean
 Mac String: Copyright ⓒ 2013 WOOWA BROTHERS Corporation(www.woowahan.com) with Reserved Font Name "BM-HANNA"
Windows String: Copyright © 2013 WOOWA BROTHERS Corporation(www.woowahan.com) with Reserved Font Name "BM-HANNA"
### Test BMHANNA-Regular.ttf
$ bakery-lint.py result BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_names_are_ascii_only.CheckNamesAreASCIIOnly.test_check_names_are_ascii_only(): FAIL
$ bakery-ascii-fix.py /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_names_are_ascii_only.CheckNamesAreASCIIOnly.test_check_names_are_ascii_only(): OK
bakery_lint.tests.downstream.test_gpos_table_has_kerning_info.CheckGposTableHasKerningInfo.test_gpos_table_has_kerning_info(): FAIL
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): FAIL
$ bakery-gasp.py --set=15 /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): OK
$ bakery-gasp.py --set=15 /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
Glyph 2443 is called ".notdef", a singularly inept choice of name (only glyph 0
 may be called .notdef)
FontForge will rename it.
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
The following table(s) in the font have been ignored by FontForge
  Ignoring 'VDMX' vertical device metrics table
Glyph 11353 is called ".notdef", a singularly inept choice of name (only glyph 0
 may be called .notdef)
FontForge will rename it.
Success: Generated OpenType-TTF (/home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf)
strippedname:/home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.otf
### Test BM-HANNAStd-Bold.ttf
$ bakery-lint.py result BM-HANNAStd-Bold.ttf
### (5 of 6) Generate METADATA.json (genmetadata.py)
$ genmetadata.py /home/travis/build/fontdirectory/hanna/builds/build
{} exists
FATAL: No *-Regular.ttf found to set family name!
Designer's name from font is: BONGJIN KIM, JAEHYUN KEUM, MINJUNG KIM, JUHEE TAE
bakery_lint.tests.downstream.test_names_are_ascii_only.CheckNamesAreASCIIOnly.test_check_names_are_ascii_only(): OK
bakery_lint.tests.downstream.test_gpos_table_has_kerning_info.CheckGposTableHasKerningInfo.test_gpos_table_has_kerning_info(): FAIL
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): FAIL
$ bakery-gasp.py --set=15 /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): OK
$ bakery-gasp.py --set=15 /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
The following table(s) in the font have been ignored by FontForge
  Ignoring 'DSIG' digital signature table
Original size: 571832\nGzip size: 181658
Family Name: UNKNOWN
PS Name: BM-HANNAStd-KO
Full Name:
Style: normal
Weight: 700
Filename: BM-HANNAStd-Bold.ttf
Copyright:
Family Name: UNKNOWN
PS Name: BMHANNA
Full Name: BM HANNA
Style: normal
Weight: 400
Filename: BMHANNA-Regular.ttf
Copyright: Copyright (c) 2013 WOOWA BROTHERS Corporation(www.woowahan.com) with Reserved Font Name "BM HANNA"
### (6 of 6) Run tests for METADATA.json
$ bakery-lint.py metadata METADATA.json
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_latin(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_menu(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_description_is_more_than_500b(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_description_is_valid_html(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_daltonmaag_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontbureau_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontscom_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontshop_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontsmith_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_houseind_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_myfonts_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_veer_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_family_is_listed_in_gwf(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_atleast_latin_menu_subsets_exist(): FAIL
/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/tests/metadata_test.py:141: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
  self.assertTrue(designer in designers,
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_designer_exists_in_profiles_csv(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_items_dicts(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_key_list(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_no_dupes(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_has_unique_style_weight_pairs(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_keys(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_license(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_no_unknown_top_keys(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_subsets_key_list(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_top_keys_types(): FAIL
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_contains_correct_rfn(): FAIL
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_is_consistent_across_family(): OK
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_matches_pattern(): FAIL
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_metadata_copyright_size(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_font_name_matches_family(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_family(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_family_values_are_all_the_same(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_filename_matches_postScriptName(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_font_have_regular(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fonts_fields_have_fontname(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fullname_is_equal_to_internal_font_fullname(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fullname_matches_postScriptName(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_postScriptName_matches_ttf_fontname(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_regular_is_400(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_regular_is_normal(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_copyrighttxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_description_exists(): OK
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_fontlogtxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_licensetxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_subsets_exists.CheckSubsetsExist.test_check_subsets_exists(): FAIL
bakery_lint.tests.downstream.test_check_monospace_agreements.CheckMonospaceAgreement.test_check_monospace_agreement(): OK
bakery_lint.tests.downstream.test_check_metadata_style_matches_names.CheckItalicStyleMatchesMacStyle.test_check_italic_style_matches_names(): OK
bakery_lint.tests.downstream.test_check_metadata_style_matches_names.CheckNormalStyleMatchesMacStyle.test_check_normal_style_matches_names(): OK
bakery_lint.tests.downstream.test_check_metadata_matches_nametable.CheckMetadataMatchesNameTable.test_check_metadata_matches_nametable(): FAIL
bakery_lint.tests.downstream.test_check_metadata_fields.CheckMetadataFields.test_check_metadata_fields(): OK
bakery_lint.tests.downstream.test_check_menu_contains_proper_glyphs.CheckMenuSubsetContainsProperGlyphs.test_check_menu_contains_proper_glyphs(): ERROR
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_unicode_codepoints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_flipped_reference_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_anchors(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_extrema_in_glyphs(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_overlapped_hints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_integer_aligned(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_not_too_far_apart(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_hints_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_referenced_glyphs_are_present(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_glyph_names(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_length_instructions(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_glyph_intersect(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_open_contours(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_wrong_direction_in_glyphs(): FAIL
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_encodings_of_glyphs_across_family(): OK
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_names_of_glyphs_across_family(): FAIL
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_number_of_glyphs_across_family(): FAIL
bakery_lint.tests.downstream.test_check_font_name_not_in_camelcase.CheckFontNameNotInCamelCase.test_fontname_not_in_camel_case(): OK
bakery_lint.tests.downstream.test_check_files_menu_agreements.CheckFontsMenuAgreements.test_menu_file_agreement(): FAIL
bakery_lint.tests.downstream.test_check_familyname_matches_fontnames.CheckFamilyNameMatchesFontNames.test_check_familyname_matches_fontnames(): OK
bakery_lint.tests.downstream.test_check_canonical_weights.CheckCanonicalWeights.test_check_canonical_weights(): OK
bakery_lint.tests.downstream.test_check_canonical_weights.CheckPostScriptNameMatchesWeight.test_postscriptname_contains_correct_weight(): FAIL
bakery_lint.tests.downstream.test_check_canonical_weights.CheckFontWeightSameAsInMetadata.test_font_weight_same_as_in_metadata(): OK
bakery_lint.tests.downstream.test_check_canonical_weights.CheckFullNameEqualCanonicalName.test_metadata_contains_current_font(): OK
bakery_lint.tests.downstream.test_check_canonical_styles.CheckCanonicalStyles.test_check_canonical_styles(): OK
bakery_lint.tests.downstream.test_check_canonical_filenames.CheckCanonicalFilenames.test_check_canonical_filenames(): FAIL
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalLinegapMetrics.test_metrics_linegaps_are_zero(): FAIL
$ bakery-vmet-fix.py --autofix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_unicode_codepoints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_flipped_reference_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_anchors(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_extrema_in_glyphs(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_overlapped_hints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_integer_aligned(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_not_too_far_apart(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_hints_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_referenced_glyphs_are_present(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_glyph_names(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_length_instructions(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_glyph_intersect(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_open_contours(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_wrong_direction_in_glyphs(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalLinegapMetrics.test_metrics_linegaps_are_zero(): FAIL
$ bakery-vmet-fix.py --autofix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ bakery-vmet-fix.py /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ bakery-vmet-fix.py /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
Parameter              BM-HANNAStd-Bold.ttf    BMHANNA-Regular.ttf    
ymax                   767                     767                    
hhea.ascent            767                     767                    
OS/2.sTypoAscender     767                     767                    
OS/2.usWinAscent       767                     767                    
ymin                   -333                    -333                   
hhea.descent           -333                    -333                   
OS/2.sTypoDescender    -333                    -333                   
OS/2.usWinDescent      333                     333                    
hhea.lineGap           0                       0                      
OS/2.sTypoLineGap      0                       0                      
hhea total             1100                    1100                   
typo total             1100                    1100                   
win total              1100                    1100                   
UPM:Heights            1000:1100               1000:1100              
UPM:Heights %          110 %                   110 %                  


bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalLinegapMetrics.test_metrics_linegaps_are_zero(): OK
Parameter              BM-HANNAStd-Bold.ttf    BMHANNA-Regular.ttf    
ymax                   767                     767                    
hhea.ascent            767                     767                    
OS/2.sTypoAscender     767                     767                    
OS/2.usWinAscent       767                     767                    
ymin                   -333                    -333                   
hhea.descent           -333                    -333                   
OS/2.sTypoDescender    -333                    -333                   
OS/2.usWinDescent      333                     333                    
hhea.lineGap           0                       0                      
OS/2.sTypoLineGap      0                       0                      
hhea total             1100                    1100                   
typo total             1100                    1100                   
win total              1100                    1100                   
UPM:Heights            1000:1100               1000:1100              
UPM:Heights %          110 %                   110 %                  


bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalLinegapMetrics.test_metrics_linegaps_are_zero(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalAscentMetrics.test_metrics_ascents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalAscentMetrics.test_metrics_ascents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalDescentMetrics.test_metrics_descents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_upm_heights_less_120.TestCheckUPMHeightsLess120.test_check_upm_heigths_less_120(): OK
bakery_lint.tests.downstream.test_check_unused_glyph_data.CheckUnusedGlyphData.test_check_unused_glyph_data(): ERROR
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
$ bakery-encode-glyphs-fix.py --autofix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
bakery_lint.tests.downstream.test_check_panose_identification.CheckPanoseIdentification.test_check_panose_identification(): OK
bakery_lint.tests.downstream.test_check_os2_width_class.CheckOS2WidthClass.test_check_os2_width_class(): OK
bakery_lint.tests.downstream.test_check_no_problematic_formats.CheckNoProblematicFormats.test_check_no_problematic_formats(): OK
bakery_lint.tests.downstream.test_check_nbsp_width_matches_sp_width.CheckNbspWidthMatchesSpWidth.test_check_nbsp_width_matches_sp_width(): FAIL
$ bakery-nbsp-fix.py /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_nbsp_width_matches_sp_width.CheckNbspWidthMatchesSpWidth.test_check_nbsp_width_matches_sp_width(): FAIL
bakery_lint.tests.downstream.test_check_names_same_across_platforms.CheckNamesSameAcrossPlatforms.test_check_names_same_across_platforms(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckStyleNameRecommendation.test_check_stylename_is_under_recommendations(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFamilyNameRecommendation.test_check_opentype_familyname(): FAIL
$ bakery-opentype-fix.py /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFamilyNameRecommendation.test_check_opentype_familyname(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTStyleNameRecommendation.test_check_opentype_stylename(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFullNameRecommendation.test_check_opentype_fullname(): OK
bakery_lint.tests.downstream.test_check_magic_prep_code.CheckMagicPREPByteCode.test_prep_magic_code(): FAIL
bakery_lint.tests.downstream.test_check_license_included.CheckLicenseIncluded.test_license_included_in_font_names(): FAIL
bakery_lint.tests.downstream.test_check_italic_angle_agreement.CheckItalicAngleAgreement.test_check_italic_angle_agreement(): OK
bakery_lint.tests.downstream.test_check_hmtx_hhea_max_advance_width_agreement.CheckHmtxHheaMaxAdvanceWidthAgreement.test_check_hmtx_hhea_max_advance_width_agreement(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_euro(): FAIL
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_nbsp(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_space(): OK
bakery_lint.tests.downstream.test_check_glyf_table_length.CheckGlyfTableLength.test_check_glyf_table_length(): FAIL
bakery_lint.tests.downstream.test_check_full_font_name_begins_with_family_name.CheckFullFontNameBeginsWithFamilyName.test_check_full_font_name_begins_with_family_name(): OK
bakery_lint.tests.downstream.test_check_fontname_matches_macstyle.CheckFontNameEqualToMacStyleFlags.test_fontname_is_equal_to_macstyle(): FAIL
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasDsigTable.test_check_font_has_dsig_table(): FAIL
$ bakery-dsig.py /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasDsigTable.test_check_font_has_dsig_table(): OK
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasNotKernTable.test_no_kern_table_exists(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFsTypeIsNotSet.test_is_fstype_not_set(): FAIL
$ bakery-fstype-fix.py --autofix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_font_agreements.CheckFsTypeIsNotSet.test_is_fstype_not_set(): OK
$ bakery-fstype-fix.py --autofix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_em_is_1000(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_file_is_font(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_font_is_font(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_latin_file_exists(): FAIL
### Optimize TTF BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalDescentMetrics.test_metrics_descents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_upm_heights_less_120.TestCheckUPMHeightsLess120.test_check_upm_heigths_less_120(): OK
bakery_lint.tests.downstream.test_check_unused_glyph_data.CheckUnusedGlyphData.test_check_unused_glyph_data(): ERROR
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
$ bakery-encode-glyphs-fix.py --autofix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf.fix /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
$ ls -l 'BMHANNA-Regular.ttf'* # look at the size savings of that subset process
BMHANNA-Regular.ttf.opt: 495784 bytes
BMHANNA-Regular.ttf: 610900 bytes
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf.opt /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
### Autohint TTFs (ttfautohint) BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
bakery_lint.tests.downstream.test_check_panose_identification.CheckPanoseIdentification.test_check_panose_identification(): OK
bakery_lint.tests.downstream.test_check_os2_width_class.CheckOS2WidthClass.test_check_os2_width_class(): OK
bakery_lint.tests.downstream.test_check_no_problematic_formats.CheckNoProblematicFormats.test_check_no_problematic_formats(): OK
$ ls -l /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.*ttf # look at the size savings of that subset process
/home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf: 495784 bytes
/home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.autohint.ttf: 534092 bytes
$ mv /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.autohint.ttf /home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
### Subset TTFs (pyftsubset) BMHANNA-Regular.ttf
bakery_lint.tests.downstream.test_check_nbsp_width_matches_sp_width.CheckNbspWidthMatchesSpWidth.test_check_nbsp_width_matches_sp_width(): FAIL
$ bakery-nbsp-fix.py /home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
Process Process-8:
Traceback (most recent call last):
  File "/opt/python/2.7.8/lib/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/opt/python/2.7.8/lib/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_cli/pipe/build.py", line 114, in run_processes
    fontlint.run(filename, pipedata)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_cli/pipe/fontlint.py", line 60, in run
    log=self.bakery.logger)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/__init__.py", line 27, in run_set
    return run_suite(tests_suite)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/base.py", line 246, in run_suite
    runner.run(suite)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/base.py", line 171, in run
    test(result)
  File "/opt/python/2.7.8/lib/python2.7/unittest/suite.py", line 70, in __call__
    return self.run(*args, **kwds)
  File "/opt/python/2.7.8/lib/python2.7/unittest/suite.py", line 108, in run
    test(result)
  File "/opt/python/2.7.8/lib/python2.7/unittest/case.py", line 393, in __call__
    return self.run(*args, **kwds)
  File "/opt/python/2.7.8/lib/python2.7/unittest/case.py", line 333, in run
    result.addFailure(self, sys.exc_info())
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/base.py", line 136, in addFailure
    self.callmethod(test_method.autofix_method, test)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/base.py", line 91, in callmethod
    getattr(mod, methodname.split('.')[-1])(test)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_cli/pipe/autofix.py", line 99, in fix_nbsp
    checkAndFix(targetpath)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_cli/scripts/nbsp.py", line 108, in checkAndFix
    spaceWidth = getWidth(font, space)
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_cli/scripts/nbsp.py", line 82, in getWidth
    return font['hmtx'][glyphname][0]
  File "/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/FontTools/fontTools/ttLib/tables/_h_m_t_x.py", line 98, in __getitem__
    return self.metrics[glyphName]
KeyError: None
strippedname:/home/travis/build/fontdirectory/hanna/builds/build/BM-HANNAStd-Bold.ttf
Generate BMHANNA-Regular.latin
Generate BMHANNA-Regular.menu
strippedname:/home/travis/build/fontdirectory/hanna/builds/build/BMHANNA-Regular.ttf
spaceWidth is    254
nbspWidth is     254
Nothing to do
{
  "name": "UNKNOWN", 
  "designer": "BONGJIN KIM, JAEHYUN KEUM, MINJUNG KIM, JUHEE TAE", 
  "license": "", 
  "visibility": "Sandbox", 
  "category": "monospace", 
  "size": 181658, 
  "dateAdded": "2014-09-19", 
  "fonts": [
    {
      "name": "UNKNOWN", 
      "postScriptName": "BM-HANNAStd-KO", 
      "fullName": "", 
      "style": "normal", 
      "weight": 700, 
      "filename": "BM-HANNAStd-Bold.ttf", 
      "copyright": ""
    }, 
    {
      "name": "UNKNOWN", 
      "postScriptName": "BMHANNA", 
      "fullName": "BM HANNA", 
      "style": "normal", 
      "weight": 400, 
      "filename": "BMHANNA-Regular.ttf", 
      "copyright": "Copyright (c) 2013 WOOWA BROTHERS Corporation(www.woowahan.com) with Reserved Font Name \"BM HANNA\""
    }
  ], 
  "subsets": [
    "latin"
  ]
}
